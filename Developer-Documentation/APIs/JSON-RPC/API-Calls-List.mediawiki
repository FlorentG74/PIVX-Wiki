PIVX API call list (as of version 3.0.6)

== Common operations ==

=== Listing my PIVX addresses ===

Listing the PIVX [[address|addresses]] in your wallet is easily done via ''listreceivedbyaddress''. It normally lists only addresses which already have received transactions, however you can list all the addresses by setting the first argument to 0, and the second one to true.

[[accounts explained|Accounts]] are used to organize addresses.

== Full list ==

Required arguments are denoted inside &lt; and &gt; Optional arguments are inside [ and ].

{|class="wikitable"
! Command !! Parameters !! Description !! Requires unlocked wallet?
|-
!colspan='4' | Blockchain
|-
| <code>getbestblockhash</code> || &nbsp; || Returns the hash of the best (tip) block in the longest block chain. || N
|-
| <code>getbestsaplinganchor</code> || &nbsp; ||  || 
|-
| <code>getblock</code> || <hash> [verbose] || Returns information about the block with the given hash. || N
|-
| <code>getblockchaininfo</code> || &nbsp; || Returns an object containing various state info regarding block chain processing. || N
|-
| <code>getblockcount</code> || &nbsp; || Returns the number of blocks in the longest block chain. || N
|-
| <code>getblockhash</code> || <index> || Returns hash of block in best-block-chain at index provided. || N
|-
| <code>getblockheader</code> || <hash> [verbose] || If verbose is false, returns a string that is serialized, hex-encoded data for block 'hash' header. If verbose is true, returns an Object with information about block <hash> header. || N
|-
| <code>getblockindexstats</code> || <height> <range> || x || x
|-
| <code>getchaintips</code> || &nbsp; || Return information about all known tips in the block tree, including the main chain as well as orphaned branches. || N
|-
| <code>getdifficulty</code> || &nbsp; || Returns the proof-of-work difficulty as a multiple of the minimum difficulty. || N
|-
| <code>getfeeinfo</code> || <blocks> || x || x
|-
| <code>getmempoolinfo</code> || &nbsp; || Returns details on the active state of the TX memory pool. || N
|-
| <code>getrawmempool</code> || [verbose] || Returns all transaction ids in memory pool as a json array of string transaction ids. || N
|-
| <code>getsupplyinfo</code> || [forceupdate] || x || x
|-
| <code>gettxout</code> || <txid> <n> [includemempool=true] || Returns details about an unspent transaction output. || N
|-
| <code>gettxoutsetinfo</code> || &nbsp; || Returns statistics about the unspent transaction output set. || N
|-
| <code>verifychain</code> || [numblocks=288] || Verifies blockchain database. || N
|-
!colspan='4' | Budget
|-
| <code>checkbudgets</code> || &nbsp; || Initiates a buddget check cycle manually. || N
|-
| <code>getbudgetinfo</code> || [proposal] || Show current masternode budgets with optional filter by proposal name. || N
|-
| <code>getbudgetprojection</code> || &nbsp; || Show the projection of which proposals will be paid the next cycle. || N
|-
| <code>getbudgetvotes</code> || <proposal> || Print vote information for a budget proposal. || N
|-
| <code>getnextsuperblock</code> || &nbsp; || Print the next super block height || N
|-
| <code>mnbudgetrawvote</code> || <masternode-tx-hash> <masternode-tx-index> <proposal-hash> <yes|no> <time> <vote-sig> || Compile and relay a proposal vote with provided external signature instead of signing vote internally. || N
|-
| <code>mnbudgetvote</code> || <local|many|alias> <votehash> <yes|no> [alias] || Vote on a budget proposal. || N
|-
| <code>mnfinalbudget</code> || <command> [passphrase] || Vote or show current budgets. || Y/N
|-
| <code>preparebudget</code> || <proposal-name> <url> <payment-count> <block-start> <pivx-address> <monthly-payment> || Prepare proposal for network by signing and creating tx. || Y
|-
| <code>submitbudget</code> || <proposal-name> <url> <payment-count> <block-start> <pivx-address> <monthly-payment> <fee-tx> || Submit proposal to the network. || N

|-
!colspan='4' | Control
|-
| <code>getinfo</code> || &nbsp; || Returns an object containing various state info. || N
|-
| <code>help</code> || [command] || List all commands, or get help for a specified command. || N
|-
| <code>mnsync</code> || <status|reset> || Returns the sync status or resets sync. || N
|-
| <code>spork</code> || <show|active> || Print raw value or active status of sporks. || N
|-
| <code>stop</code> || &nbsp; || Stop PIVX server. || N
|-
!colspan='4' | Masternode
|-
| <code>createmasternodebroadcast</code> || <command> [alias] || x || x
|-
| <code>createmasternodekey</code> || &nbsp; || Create a new masternode private key. || N
|-
| <code>decodemasternodebroadcast</code> || <hexstring> || x || x
|-
| <code>getmasternodecount</code> || &nbsp; || Get masternode count values. || N
|-
| <code>getmasternodeoutputs</code> || &nbsp; || Print all masternode transaction outputs. || N
|-
| <code>getmasternodescores</code> || [blocks=10] || Print list of winning masternode by score. || N
|-
| <code>getmasternodestatus</code> || &nbsp; || Print masternode status. || N
|-
| <code>getmasternodewinners</code> || [blocks=10] [filter] || Print the masternode winners for the last n blocks || N
|-
| <code>initmasternode</code> || [masternodePrivKey masternodeAddr] || x || x
|-
| <code>listmasternodeconf</code> || [filter] || Print masternode.conf in JSON format. || N
|-
| <code>listmasternodes</code> || [filter] || Get a ranked list of masternodes. Optional filter by txhash, status, or payment address. || N
|-
| <code>masternodecurrent</code> || &nbsp || Get current masternode winner. || N
|-
| <code>relaymasternodebroadcast</code> || <hexstring> || x || x
|-
| <code>startmasternode</code> || <local|all|many|missing|disabled|alias> <lockwallet> [alias] || Attempts to start one or more masternode(s). || Y/N

|-
!colspan='4' | PIVX
|-
| <code>prioritisetransaction</code> || <txid> <priority delta> <fee delta> || Accepts the transaction into mined blocks at a higher (or lower) priority || N

|-
!colspan='4' | Network
|-
| <code>addnode</code> || <node> <add|remove|onetry> || Attempts add or remove a node from the addnode list. Or try a connection to a node once. || N
|-
| <code>clearbanned</code> || &nbsp; || version 3.1.0 Clear all banned IPs. || N
|-
| <code>disconnectnode</code> || <node> || version 3.1.0 Immediately disconnects from the specified node. || N
|-
| <code>getaddednodeinfo</code> || <dns> [node] || Returns information about the given added node, or all added nodes. (note that onetry addnodes are not listed here) If dns is false, only a list of added nodes will be provided, otherwise connected information will also be available. || N
|-
| <code>getconnectioncount</code> || &nbsp; || Returns the number of connections to other nodes. || N
|-
| <code>getnettotals</code> || &nbsp; || Returns information about network traffic, including bytes in, bytes out, and current time. || N
|-
| <code>getnetworkinfo</code> || &nbsp; || Returns an object containing various state info regarding P2P networking. || N
|-
| <code>getpeerinfo</code> || &nbsp; || Returns data about each connected network node as a json array of objects. || N
|-
| <code>listbanned</code> || &nbsp; || version 3.1.0 List all banned IPs/Subnets. || N
|-
| <code>ping</code> || &nbsp; || Requests that a ping be sent to all other nodes, to measure ping time. || N
|-
| <code>setban</code> || <ip(/netmask)> <add|remove> [bantime] [absolute] || version 3.1.0 Attempts add or remove a IP/Subnet from the banned list. || N
|-

!colspan='4' | Raw Transactions
|-
| <code>createrawtransaction</code> || [{"txid":txid,"vout":n},...] {address:amount,...} || Creates a raw transactionspending given inputs. || N
|-
| <code>decoderawtransaction</code> || <hex string> || Produces a human-readable JSON object for a raw transaction. || N
|-
| <code>decodescript</code> || <hex> || Decode a hex-encoded script. || N
|-
| <code>fundrawtransaction</code> || <hexstring> [options] || x || x
|-
| <code>getrawtransaction</code> || <txid> [verbose=0] || Returns raw transactionrepresentation for given transaction id. || N
|-
| <code>sendrawtransaction</code> || <hexstring> [allowhighfees=false] [swiftx=false] || Submits raw transaction (serialized, hex-encoded) to local node and network. || N
|-
| <code>signrawtransaction</code> || "<hexstring>" [{"txid":txid,"vout":n,"scriptPubKey":hex},...] [<privatekey1>,...] [sighashtype=ALL] || Adds signatures to a raw transaction and returns the resulting raw transaction. || Y/N
|-
!colspan='4' | Utility
|-
| <code>createmultisig</code> || <nrequired> <["key",...]> || Creates a multi-signature address with n signature of m keys required. || N
|-
| <code>estimatefee</code> || <nblocks> || Estimates the approximate fee per kilobyte needed for a transaction to begin confirmation within nblocks blocks. || N
|-
| <code>estimatesmartfee nblocks</code> || x || x || x
|-
| <code>logging</code> || "[include,...]  [exclude,...]"  || x || x
|-
| <code>validateaddress</code> || <nowiki>pivxaddress</nowiki> || Returns information about the given pivx address. || N
|-
|-
| <code>verifymessage</code> || <pivxaddress> <signature> <message> || Verify a signed message. || N
|}

==Error Codes==

See [https://github.com/bitcoin/bitcoin/blob/62f2d769e45043c1f262ed45babb70fe237ad2bb/src/rpc/protocol.h#L30 rpcprotocol.h] for the list of error codes and their meanings.

==See Also==

* [[API reference JSON-RPC]]
* [http://code.gogulski.com/bitcoin-php/class_bitcoin_client.html PHP BitcoinClient Class Reference]

==References==
